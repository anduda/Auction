//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Auction.Server {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IServerException", Namespace="http://schemas.datacontract.org/2004/07/AuctionServer")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Auction.Server.UserIsBlockedException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Auction.Server.WrongPasswordException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Auction.Server.InvalidLoginException))]
    public partial class IServerException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserIsBlockedException", Namespace="http://schemas.datacontract.org/2004/07/AuctionServer")]
    [System.SerializableAttribute()]
    public partial class UserIsBlockedException : Auction.Server.IServerException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WrongPasswordException", Namespace="http://schemas.datacontract.org/2004/07/AuctionServer")]
    [System.SerializableAttribute()]
    public partial class WrongPasswordException : Auction.Server.IServerException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidLoginException", Namespace="http://schemas.datacontract.org/2004/07/AuctionServer")]
    [System.SerializableAttribute()]
    public partial class InvalidLoginException : Auction.Server.IServerException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuctionInfo", Namespace="http://schemas.datacontract.org/2004/07/AuctionServer.Auctions")]
    [System.SerializableAttribute()]
    public partial class AuctionInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CurrentPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MongoDB.Bson.ObjectId IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Auction.Server.Lot LotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double StartPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WinnerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CurrentPrice {
            get {
                return this.CurrentPriceField;
            }
            set {
                if ((this.CurrentPriceField.Equals(value) != true)) {
                    this.CurrentPriceField = value;
                    this.RaisePropertyChanged("CurrentPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MongoDB.Bson.ObjectId Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Auction.Server.Lot Lot {
            get {
                return this.LotField;
            }
            set {
                if ((object.ReferenceEquals(this.LotField, value) != true)) {
                    this.LotField = value;
                    this.RaisePropertyChanged("Lot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double StartPrice {
            get {
                return this.StartPriceField;
            }
            set {
                if ((this.StartPriceField.Equals(value) != true)) {
                    this.StartPriceField = value;
                    this.RaisePropertyChanged("StartPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Winner {
            get {
                return this.WinnerField;
            }
            set {
                if ((object.ReferenceEquals(this.WinnerField, value) != true)) {
                    this.WinnerField = value;
                    this.RaisePropertyChanged("Winner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lot", Namespace="http://schemas.datacontract.org/2004/07/AuctionServer")]
    [System.SerializableAttribute()]
    public partial class Lot : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MongoDB.Bson.ObjectId IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MongoDB.Bson.ObjectId Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/AuctionServer.Users")]
    [System.SerializableAttribute()]
    public partial class UserInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondName {
            get {
                return this.SecondNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondNameField, value) != true)) {
                    this.SecondNameField = value;
                    this.RaisePropertyChanged("SecondName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/AuctionServer.Users")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBlocked {
            get {
                return this.IsBlockedField;
            }
            set {
                if ((this.IsBlockedField.Equals(value) != true)) {
                    this.IsBlockedField = value;
                    this.RaisePropertyChanged("IsBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondName {
            get {
                return this.SecondNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondNameField, value) != true)) {
                    this.SecondNameField = value;
                    this.RaisePropertyChanged("SecondName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IAuctionService", CallbackContract=typeof(Auction.Server.IAuctionServiceCallback))]
    public interface IAuctionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/Registration", ReplyAction="http://tempuri.org/IAuctionService/RegistrationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Auction.Server.InvalidLoginException), Action="http://tempuri.org/IAuctionService/RegistrationInvalidLoginExceptionFault", Name="InvalidLoginException", Namespace="http://schemas.datacontract.org/2004/07/AuctionServer")]
        void Registration(string login, string password, string name, string surname, string secondName, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/Registration", ReplyAction="http://tempuri.org/IAuctionService/RegistrationResponse")]
        System.Threading.Tasks.Task RegistrationAsync(string login, string password, string name, string surname, string secondName, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/Logon", ReplyAction="http://tempuri.org/IAuctionService/LogonResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Auction.Server.IServerException), Action="http://tempuri.org/IAuctionService/LogonIServerExceptionFault", Name="IServerException", Namespace="http://schemas.datacontract.org/2004/07/AuctionServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(Auction.Server.UserIsBlockedException), Action="http://tempuri.org/IAuctionService/LogonUserIsBlockedExceptionFault", Name="UserIsBlockedException", Namespace="http://schemas.datacontract.org/2004/07/AuctionServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(Auction.Server.WrongPasswordException), Action="http://tempuri.org/IAuctionService/LogonWrongPasswordExceptionFault", Name="WrongPasswordException", Namespace="http://schemas.datacontract.org/2004/07/AuctionServer")]
        bool Logon(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/Logon", ReplyAction="http://tempuri.org/IAuctionService/LogonResponse")]
        System.Threading.Tasks.Task<bool> LogonAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/Logout", ReplyAction="http://tempuri.org/IAuctionService/LogoutResponse")]
        void Logout();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/Logout", ReplyAction="http://tempuri.org/IAuctionService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetCurrentAuctions", ReplyAction="http://tempuri.org/IAuctionService/GetCurrentAuctionsResponse")]
        Auction.Server.AuctionInfo[] GetCurrentAuctions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetCurrentAuctions", ReplyAction="http://tempuri.org/IAuctionService/GetCurrentAuctionsResponse")]
        System.Threading.Tasks.Task<Auction.Server.AuctionInfo[]> GetCurrentAuctionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetUserByLogin", ReplyAction="http://tempuri.org/IAuctionService/GetUserByLoginResponse")]
        Auction.Server.UserInfo GetUserByLogin(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetUserByLogin", ReplyAction="http://tempuri.org/IAuctionService/GetUserByLoginResponse")]
        System.Threading.Tasks.Task<Auction.Server.UserInfo> GetUserByLoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetUserLots", ReplyAction="http://tempuri.org/IAuctionService/GetUserLotsResponse")]
        Auction.Server.Lot[] GetUserLots(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetUserLots", ReplyAction="http://tempuri.org/IAuctionService/GetUserLotsResponse")]
        System.Threading.Tasks.Task<Auction.Server.Lot[]> GetUserLotsAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/AddAuction", ReplyAction="http://tempuri.org/IAuctionService/AddAuctionResponse")]
        void AddAuction(System.DateTime startTime, System.DateTime endTime, MongoDB.Bson.ObjectId lotId, double startPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/AddAuction", ReplyAction="http://tempuri.org/IAuctionService/AddAuctionResponse")]
        System.Threading.Tasks.Task AddAuctionAsync(System.DateTime startTime, System.DateTime endTime, MongoDB.Bson.ObjectId lotId, double startPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetAuction", ReplyAction="http://tempuri.org/IAuctionService/GetAuctionResponse")]
        Auction.Server.AuctionInfo GetAuction(MongoDB.Bson.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetAuction", ReplyAction="http://tempuri.org/IAuctionService/GetAuctionResponse")]
        System.Threading.Tasks.Task<Auction.Server.AuctionInfo> GetAuctionAsync(MongoDB.Bson.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAuctionService/Bet")]
        void Bet(MongoDB.Bson.ObjectId id, [System.ServiceModel.MessageParameterAttribute(Name="bet")] double bet1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAuctionService/Bet")]
        System.Threading.Tasks.Task BetAsync(MongoDB.Bson.ObjectId id, double bet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/EnterAuction", ReplyAction="http://tempuri.org/IAuctionService/EnterAuctionResponse")]
        Auction.Server.AuctionInfo EnterAuction(MongoDB.Bson.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/EnterAuction", ReplyAction="http://tempuri.org/IAuctionService/EnterAuctionResponse")]
        System.Threading.Tasks.Task<Auction.Server.AuctionInfo> EnterAuctionAsync(MongoDB.Bson.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/Deposit", ReplyAction="http://tempuri.org/IAuctionService/DepositResponse")]
        void Deposit(double bet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/Deposit", ReplyAction="http://tempuri.org/IAuctionService/DepositResponse")]
        System.Threading.Tasks.Task DepositAsync(double bet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetLotById", ReplyAction="http://tempuri.org/IAuctionService/GetLotByIdResponse")]
        Auction.Server.Lot GetLotById(MongoDB.Bson.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetLotById", ReplyAction="http://tempuri.org/IAuctionService/GetLotByIdResponse")]
        System.Threading.Tasks.Task<Auction.Server.Lot> GetLotByIdAsync(MongoDB.Bson.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/CreateLot", ReplyAction="http://tempuri.org/IAuctionService/CreateLotResponse")]
        MongoDB.Bson.ObjectId CreateLot(string Name, string Description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/CreateLot", ReplyAction="http://tempuri.org/IAuctionService/CreateLotResponse")]
        System.Threading.Tasks.Task<MongoDB.Bson.ObjectId> CreateLotAsync(string Name, string Description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/ChangeUserStatus", ReplyAction="http://tempuri.org/IAuctionService/ChangeUserStatusResponse")]
        void ChangeUserStatus(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/ChangeUserStatus", ReplyAction="http://tempuri.org/IAuctionService/ChangeUserStatusResponse")]
        System.Threading.Tasks.Task ChangeUserStatusAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetAllUsers", ReplyAction="http://tempuri.org/IAuctionService/GetAllUsersResponse")]
        Auction.Server.User[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetAllUsers", ReplyAction="http://tempuri.org/IAuctionService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<Auction.Server.User[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetNewAuctions", ReplyAction="http://tempuri.org/IAuctionService/GetNewAuctionsResponse")]
        Auction.Server.AuctionInfo[] GetNewAuctions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetNewAuctions", ReplyAction="http://tempuri.org/IAuctionService/GetNewAuctionsResponse")]
        System.Threading.Tasks.Task<Auction.Server.AuctionInfo[]> GetNewAuctionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetUser", ReplyAction="http://tempuri.org/IAuctionService/GetUserResponse")]
        Auction.Server.UserInfo GetUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetUser", ReplyAction="http://tempuri.org/IAuctionService/GetUserResponse")]
        System.Threading.Tasks.Task<Auction.Server.UserInfo> GetUserAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuctionServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAuctionService/OnBet")]
        void OnBet(MongoDB.Bson.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAuctionService/OnStart")]
        void OnStart(MongoDB.Bson.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAuctionService/OnFinish")]
        void OnFinish(MongoDB.Bson.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAuctionService/OnEnter")]
        void OnEnter(MongoDB.Bson.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAuctionService/OnLeave")]
        void OnLeave(MongoDB.Bson.ObjectId id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuctionServiceChannel : Auction.Server.IAuctionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuctionServiceClient : System.ServiceModel.DuplexClientBase<Auction.Server.IAuctionService>, Auction.Server.IAuctionService {
        
        public AuctionServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AuctionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AuctionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AuctionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AuctionServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Registration(string login, string password, string name, string surname, string secondName, string country) {
            base.Channel.Registration(login, password, name, surname, secondName, country);
        }
        
        public System.Threading.Tasks.Task RegistrationAsync(string login, string password, string name, string surname, string secondName, string country) {
            return base.Channel.RegistrationAsync(login, password, name, surname, secondName, country);
        }
        
        public bool Logon(string login, string password) {
            return base.Channel.Logon(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> LogonAsync(string login, string password) {
            return base.Channel.LogonAsync(login, password);
        }
        
        public void Logout() {
            base.Channel.Logout();
        }
        
        public System.Threading.Tasks.Task LogoutAsync() {
            return base.Channel.LogoutAsync();
        }
        
        public Auction.Server.AuctionInfo[] GetCurrentAuctions() {
            return base.Channel.GetCurrentAuctions();
        }
        
        public System.Threading.Tasks.Task<Auction.Server.AuctionInfo[]> GetCurrentAuctionsAsync() {
            return base.Channel.GetCurrentAuctionsAsync();
        }
        
        public Auction.Server.UserInfo GetUserByLogin(string login) {
            return base.Channel.GetUserByLogin(login);
        }
        
        public System.Threading.Tasks.Task<Auction.Server.UserInfo> GetUserByLoginAsync(string login) {
            return base.Channel.GetUserByLoginAsync(login);
        }
        
        public Auction.Server.Lot[] GetUserLots(string login) {
            return base.Channel.GetUserLots(login);
        }
        
        public System.Threading.Tasks.Task<Auction.Server.Lot[]> GetUserLotsAsync(string login) {
            return base.Channel.GetUserLotsAsync(login);
        }
        
        public void AddAuction(System.DateTime startTime, System.DateTime endTime, MongoDB.Bson.ObjectId lotId, double startPrice) {
            base.Channel.AddAuction(startTime, endTime, lotId, startPrice);
        }
        
        public System.Threading.Tasks.Task AddAuctionAsync(System.DateTime startTime, System.DateTime endTime, MongoDB.Bson.ObjectId lotId, double startPrice) {
            return base.Channel.AddAuctionAsync(startTime, endTime, lotId, startPrice);
        }
        
        public Auction.Server.AuctionInfo GetAuction(MongoDB.Bson.ObjectId id) {
            return base.Channel.GetAuction(id);
        }
        
        public System.Threading.Tasks.Task<Auction.Server.AuctionInfo> GetAuctionAsync(MongoDB.Bson.ObjectId id) {
            return base.Channel.GetAuctionAsync(id);
        }
        
        public void Bet(MongoDB.Bson.ObjectId id, double bet1) {
            base.Channel.Bet(id, bet1);
        }
        
        public System.Threading.Tasks.Task BetAsync(MongoDB.Bson.ObjectId id, double bet) {
            return base.Channel.BetAsync(id, bet);
        }
        
        public Auction.Server.AuctionInfo EnterAuction(MongoDB.Bson.ObjectId id) {
            return base.Channel.EnterAuction(id);
        }
        
        public System.Threading.Tasks.Task<Auction.Server.AuctionInfo> EnterAuctionAsync(MongoDB.Bson.ObjectId id) {
            return base.Channel.EnterAuctionAsync(id);
        }
        
        public void Deposit(double bet) {
            base.Channel.Deposit(bet);
        }
        
        public System.Threading.Tasks.Task DepositAsync(double bet) {
            return base.Channel.DepositAsync(bet);
        }
        
        public Auction.Server.Lot GetLotById(MongoDB.Bson.ObjectId id) {
            return base.Channel.GetLotById(id);
        }
        
        public System.Threading.Tasks.Task<Auction.Server.Lot> GetLotByIdAsync(MongoDB.Bson.ObjectId id) {
            return base.Channel.GetLotByIdAsync(id);
        }
        
        public MongoDB.Bson.ObjectId CreateLot(string Name, string Description) {
            return base.Channel.CreateLot(Name, Description);
        }
        
        public System.Threading.Tasks.Task<MongoDB.Bson.ObjectId> CreateLotAsync(string Name, string Description) {
            return base.Channel.CreateLotAsync(Name, Description);
        }
        
        public void ChangeUserStatus(string login) {
            base.Channel.ChangeUserStatus(login);
        }
        
        public System.Threading.Tasks.Task ChangeUserStatusAsync(string login) {
            return base.Channel.ChangeUserStatusAsync(login);
        }
        
        public Auction.Server.User[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<Auction.Server.User[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public Auction.Server.AuctionInfo[] GetNewAuctions() {
            return base.Channel.GetNewAuctions();
        }
        
        public System.Threading.Tasks.Task<Auction.Server.AuctionInfo[]> GetNewAuctionsAsync() {
            return base.Channel.GetNewAuctionsAsync();
        }
        
        public Auction.Server.UserInfo GetUser() {
            return base.Channel.GetUser();
        }
        
        public System.Threading.Tasks.Task<Auction.Server.UserInfo> GetUserAsync() {
            return base.Channel.GetUserAsync();
        }
    }
}
